openapi: 3.0.2
info:
  version: 0.0.1
  title: Template
tags:
  - name: file
    description: ""
paths:
  /ping:
    get:
      responses:
        "200":
          description: "service is active"
          content:
            application/json:
              schema:
                type: object

        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts:
    get:
      responses:
        "200":
          description: "List of posts"
          content:
            application/json:
              schema:
                type: object
                required: [ data, pagination ]
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "201":
          description: "Post created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /posts/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Post found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreatePost"
      responses:
        "200":
          description: "Post updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Post deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images:
    get:
      responses:
        "200":
          description: "List of images"
          content:
            application/json:
              schema:
                type: object
                required: [ data, pagination ]
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Image'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImage"
      responses:
        "201":
          description: "Image created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /images/{id}:
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Image found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateImage"
      responses:
        "200":
          description: "Image updated"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Image"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Image deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Success"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Pagination:
      type: object
      required: [ currentPage, totalPages, totalItems, itemsPerPage ]
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
    Error:
      type: object
      required: [error_message, code]
      properties:
        error_message:
          type: string
        code:
          type: number
    Success:
      type: object
      required: [id]
      properties:
        id:
          type: integer
    Post:
      type: object
      required: [id, title]
      properties:
        id:
          type: integer
        title:
          type: string
        content:
          type: string
        cover_url:
          type: string
    CreatePost:
      type: object
      required: [title]
      properties:
        title:
          type: string
        content:
          type: string
        cover_url:
          type: string
    Image:
      type: object
      required: [id, url]
      properties:
        id:
          type: integer
        title:
          type: string
        url:
          type: string
    CreateImage:
      type: object
      required: [url]
      properties:
        title:
          type: string
        url:
          type: string
    # UnauthorizedError:
    #     description: Access token is missing or invalid
    #     type: object
